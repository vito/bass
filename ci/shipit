#!/usr/bin/env bass

; load libraries
(use (.strings)
     (.git (linux/alpine/git))
     (git:github/vito/tabs/ref/main/gh/release)
     (*dir*/../project))

; all supported os and architectures supported by bass
;
; Must be valid values to pass to GOOS / GOARCH.
(def supported-os-arches
  [["linux" "amd64"]
   ["darwin" "amd64"]
   ["darwin" "arm64"]])

; returns the bass binary archives for each supported os + arch
(defn all-bins [src]
  (foldl
    (fn [acc [os arch]]
      (assoc acc
             (string->symbol (str os "-" arch))
             (project:build src os arch)))
    {}
    supported-os-arches))

; returns a .json file representation of a built archive
(defn archive-repro [os-arch archive]
  (mkfile (string->fs-path (str "bass." os-arch ".json"))
          (json archive)))

; returns the sha256sum output of each file
;
; Makes sure to to mount each file in to the working directory so that the
; output can be passed to sha256sum --check --ignore-missing.
(defn sha256sums [files]
  (-> (from (linux/ubuntu)
        (foldl
          (fn [t f] (with-mount t f (path-base f)))
          (with-args (.sha256sum) (map path-base files))
          files))
      (read :raw)
      next))

; returns all the assets that will be uploaded to the release
(defn build-assets [src]
  (let [bins (all-bins src)
        archives (vals bins)
        repros (reduce-kv (fn [acc k v] (cons (archive-repro k v) acc)) [] bins)
        files (append archives repros)
        sums (mkfile ./sha256sums.txt (sha256sums files))]
    (conj files sums)))

; returns true if the tag looks like a prerelease version
(defn prerelease? [tag]
  (or ; "v1.2.3-rc.1"
      (strings:includes? tag "-")
      ; "nightly"
      (not (strings:includes? tag "."))))

; creates a release with the given assets
(defn create-release [src sha tag title assets]
  (let [token (mask *env*:GITHUB_TOKEN :github-token)
        bass-release (release:auth "vito/bass" token)]
    (bass-release:create!
      tag sha assets
      {:title title
       :generate-notes true
       :notes-file (src/ (string->fs-path (str tag ".md")))
       :prerelease (prerelease? tag)})))

; builds and publishes a GitHub release
;
; Needs the sha to tag, a tag name, and a title for the release.
(defn main [sha tag title]
  (logf "shipping bass @ %s with tag %s" sha tag)
  (let [src (project:checkout sha)
        assets (build-assets src)
        release-url (create-release src sha tag title assets)]
    (logf "release published to %s" release-url)))

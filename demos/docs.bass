; Comments are syntax sugar setting :doc string metadata on the annotated
; value.
;
; A blank line in a comment separates paragraphs. Sentences in a paragraph may
; be wrapped to span multiple lines.

; The *docs* binding provides module-level documentation for its scope.
;
; The *docs* binding's value is currently ignored. More advanced forms may be
; supported in the future to support categorizing the bindings into separate
; sections. Or something.

; A module demonstrating the docs and metadata system.
(def *docs*
  _)

; When metadata is attached to a binding, the metadata transfers to its bound
; value. This is typically used to add docs for (def)s.

; returns the answer to life, the universe, and everything
(def answer 42)
(doc answer)

; Metadata attached to keywords in a {bind} form transfers to its value too.

; config schema with defaults
(def schema
  {; location of the git repo
   ^{:type :url}
   :url "https://"

   ; branch to checkout
   :branch "main"})

; The scope's commentary can be printed to stderr with (doc).
(doc)

; Values can also be passed to (doc) for inspection.
(doc schema:url schema:branch answer)

; Shortcut!
(eval [doc] schema)

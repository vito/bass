\title{bassics}
\use-plugin{bass-www}

The following is a list of the built-in types and common terms you will run
into when writing Bass programs.

\term{symbol}{
  A name, typically bound to a value in a \t{scope}.
}{
  A symbol form evaluates by fetching its binding in the current \t{scope}.
}{{{
  symbol?
}}}{
  Symbols may be constructed using a \t{keyword} form, analogous to \t{cons}
  forms which construct \t{pairs}.
}{{{
  :symbol?
}}}{
  Symbols are sometimes used as constant values signalling certain conditions,
  such as \bass{:end} to indicate the end of a stream.
}{{{
  (def vals (stream 1 2))

  [(next vals :end)
   (next vals :end)
   (next vals :end)]
}}}{
  Symbols may be chained together with \t{keyword} notation to traverse
  \t{scopes}.
}{{{
  (def foo {:a {:b 42}})
}}}{{{
  foo:a:b
}}}{
  Symbols are \t{applicative} \t{combiners}; when called with a scope, it
  fetches its binding from the scope.

  A default value may be provided as a second argument.
}{{{
  (def foo 123)

  [(:b {:a 1 :b 2 :c 3})
   (:foo (get-current-scope))
   (:b {:a 1} 42)
  ]
}}}

\term{keyword}{
  A symbol prefixed with a \code{:} is called a \italic{keyword}. It is used to
  construct the symbol itself rather than fetch its binding.
}{{{
  :im-a-symbol!
}}}{
  Keywords go hand-in-hand with \t{cons}, which is used to construct
  \t{pairs}.
}{{{
  [:+ 1 2 3]
}}}{
  Note: keywords evaluate to a \t{symbol} - they are not a distinct value.
}

\term{scope}{
  A set of \t{symbols} bound to values, with a list of \italic{parent} scopes
  to query (depth-first) when a local binding is not found.
}{
  All code evaluates in a \italic{current scope}, which is passed to
  \t{operatives} when they are called.
}{{{
  (defop here _ scope scope)

  (let [local-binding "hello"]
    (here))
}}}{
  Scopes can also be constructed using \bass{\{bind\}} notation, allowing them
  to be used like a hash or map:
}{{{
  (eval [str :uri "@" :branch]
    {:uri "https://github.com/vito/bass"
     :branch "main"})
}}}{
  Parent scopes may be provided by listing them anywhere in between the braces.
  For example, here's a scope-based alternative to \bass{(let)}:
}{{{
  (defop with [child & body] parent
    (eval [do & body] {(eval child parent) parent}))

  (with {:a 1 :b 2}
    (+ a b))
}}}{
  Comments within the braces are recorded into the child scope, enabling their
  use for lightweight schema docs:
}{{{
  (eval [doc]
    {; hello world!
     :foo "sup"

     ; goodbye world!
     :bar "later"})
}}}{
  Scopes encode to JSON by converting hyphens to underscores in their bindings.
  This may be slightly surprising but overall it helps with interoperability
  while keeping Bass code looking Lispy.
}{{{
  (dump {:foo-bar "hello!"})
}}}

\term{number}{
  An integer value. Floating point values are not supported.
}{{{
  (* 6 7)
}}}

\term{string}{
  A UTF-8 immutable string value.
}{
  \construction{TODO: document escape sequences}
}{{{
  "hello, world!"
}}}

\term{path}{
  A location of a file or directory within a filesystem.
}{
  Bass distinguishes between file and directory paths by requiring a trailing
  slash (\code{/}) for directories.
}{{{
  (def file ./some-file)
  (def dir ./some-dir/)
  [file dir]
}}}{
  Directory paths can be extended to form longer paths:
}{{{
  dir/file-in-dir
}}}{
  Extending a file path, however, will result in an error.
}{{{
  file/bam
}}}

\term{null}{
  Everyone's old friend. Used to represent the absense of value where one might
  typically be expected.
}{{{
  null
}}}{
  Note: \bass{null} is a distinct type from an empty list. The only
  \bass{(null?)} value is \bass{null}, and the only \bass{(empty?)} value is
  \bass{[]}.
}{{{
  (map null? [[] (list) null false])
}}}

\term{boolean}{
  \bass{true} or \bass{false}, but sometimes \bass{null}.
}{
  Boolean values are pretty straightforward - the only catch is that
  \bass{null} also counts as \bass{false} when given to \bass{(if)} or
  \bass{(not)}.
}{
  Otherwise, all values - including "empty" ones - are truthy.
}{{{
  [(if true :truthy :falsy)
   (if false :truthy :falsy)
   (if null :truthy :falsy)
   (if [] :truthy :falsy)
   (if "" :truthy :falsy)
   (if _ :truthy :falsy)]
}}}

\term{list}{
  A \t{pair} or \t{cons} whose second element is an \t{empty list} or a
  \t{list}.
}{
  A \t{pair} form evaluates by \italic{combining} its first value its second
  value - meaning the first value must be a \t{combiner}.
}{{{
  (list 1 2 3)
}}}{
  A \t{cons} form evaluates like \reference{cons}: it constructs a \t{pair} by
  evaluating each of its values.
}{{{
  [1 2 3]
}}}{
  Both \t{pair} and \t{cons} may have a \bass{&} symbol which provides a value
  for the rest of the list.
}{{{
  (def values [1 2 3])
}}}{{{
  (+ & values)
}}}{{{
  [-1 0 & values]
}}}

\term{empty list}{
  An empty list is represented by \bass{()} or \bass{[]}, which are both the
  same constant value.
}{{{
  (= [] ())
}}}

\term{pair}{
  A \t{list} of forms wrapped in \code{(parentheses)}, or constructed via
  \reference{cons} or \t{cons} notation.
}{{{
  (= (cons 1 (cons 2 [])) (list 1 2))
}}}{
  A \code{&} may be used to denote the second value instead of terminating with
  an \t{empty list}.
}{{{
  (= (cons 1 2) (list 1 & 2))
}}}

\term{cons}{
  A \t{list} of forms wrapped in \code{[square brackets]}.
}{{{
  (= (cons 1 (cons 2 [])) [1 2])
}}}{
  A \code{&} may be used to denote the second value instead of terminating with
  an \t{empty list}.
}{{{
  (= (cons 1 2) [1 & 2])
}}}

\term{ignore}{
  \bass{_} (underscore) is a special constant value used to discard a value
  when binding values in a scope.
}{{{
  (def (a & _) [1 2 3])

  a ; the only binding in the current scope
}}}{
  \bass{_} is also used when \bass{null} is \italic{just not enough} to express
  how absent a value is - for example, to record overarching commentary within
  a module.
}{{{
  ; Hey ma, I'm a technical writer!
  _
}}}

\term{workload}{
  A command to be run with inputs provided on standard interfaces (env, stdin,
  args, etc.).
}{
  Workloads are constructed by \italic{applying} a \t{path} locating the
  command to run. The arguments to a path \t{combiner} provide values to be
  passed to the workload on \code{stdin}.
}{
  Throughout this documentation, workloads will be rendered as space invaders.
  Under the hood, workloads are just \t{scopes} with certain bindings - you can
  click them to reveal their inner structure.
}{{{
  (.cat 42)
}}}{
  To specify values on \code{argv} instead, use \bass{(with-args)} - or use the
  \bass{$} operative for syntactic sugar.
}{{{
  (def val "hello")

  [(-> (.echo) (with-args "hi" val))
   ($ .echo hi $val)]
}}}{
  Workloads are constructed by combining a series of builder functions provided
  by the \reference{stdlib}.

  The \bass{->} operative comes in especially handy for building bespoke
  workloads without wanting to claw your eyes out.
}{{{
  (-> (.cat 42) (in-image "alpine") (response-from :stdout))
}}}{
  To run a workload, pass it to \bass{(run)}; it will return a \t{source} from
  which you can read values using \bass{(next)}.

  Putting it all together into one big \bass{->} pipeline, you get:
}{{{
  (-> (.cat 42) (in-image "alpine") (response-from :stdout) run next)
}}}

\term{runtime}{
  An internal component used for running workloads, configured by the user and
  associated to a \t{platform}.
}{
  Currently, only Docker is supported - Kubernetes support may come in the
  future.
}

\term{platform}{
  A scope containing arbitrary bindings used to select the appropriate
  configured \t{runtime} for a given \t{workload}.
}

\term{workload path}{
  A \t{path} paired with the \t{workload} that created (or creates) it.
}{{{
  (path (.run) ./some-file)
}}}{
  Workload paths can be constructed and passed around to other workloads as
  first-class values. The \t{runtime} will handle the boring mechanical work of
  mounting it into the container in the right place.
}{{{
  (def touchi-artist
    (-> ($ .touch ./artist)
        (in-image "alpine")
        (path ./artist)))

  (-> ($ .ls $touchi-artist)
      (in-image "alpine")
      (response-from :exit)
      run
      next)
}}}{
  Workload paths represent \italic{reproducible artifacts} - when passed from
  one workload into another, any paths created by the child workload will be
  inherently downstream of all of its inputs. The workload path may be exported
  to JSON format and used to re-create the artifact from scratch with
  \code{bass -e < wlp.json}.
}

\term{pipe}{
  A pipe is a \t{source} with a corresponding \t{sink}.
}

\term{source}{
  A stream of values which may be read with \bass{(next)}.
}{
  All scripts can read values from the \bass{*stdin*} source, which reads JSON
  encoded values from \code{stdin}.

  A source may be constructed from a sequence of values by calling
  \bass{(stream)}.
}{{{
  (def vals (stream 1 2 3))
  [(next vals)
   (next vals)
   (next vals)]
}}}{
  A \t{source} is also returned by \bass{(run)} to pass along values emitted by
  the workload.

  When \bass{(next)} hits the end of the stream, an error will be raised. A
  default value may be supplied as the second argument to prevent erroring.
}

\term{sink}{
  A destination for values which may be sent with \bass{(emit)}.
}{
  All scripts can emit values to the \bass{*stdout*} sink, which encodes values
  as JSON to \code{stdout}.
}{{{
  (emit "hello!" *stdout*)
  (emit 42 *stdout*)
}}}

\term{combiner}{
  A value which can be \italic{applied} to another value (typically a list of
  arguments) to perform some computation and return another value.
}

\term{operative}{
  A \t{combiner} which receives the applied arguments, \italic{unevaluated},
  along with the dynamic \t{scope} of the caller.
}{
  Operatives are defined with the \bass{(defop)} operative or constructed with
  \bass{(op)}.
}{{{
  (defop quote-with-scope args scope
    [args scope])

  (quote-with-scope a b c)
}}}

\term{applicative}{
  A \t{combiner} which \italic{wraps} an underlying \t{operative} and evaluates
  its arguments before passing them along to it.
}{
  Applicatives, typically called \italic{functions}, are defined with the
  \bass{(defn)} operative or constructed with \bass{(fn)}.
}{{{
  (defn inc [x]
    (+ x 1))

  (inc 41)
}}}

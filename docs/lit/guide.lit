\title{guide}
\use-plugin{bass-www}

\table-of-contents

This guide glosses over language semantics in favor of being a quick reference
for common tasks. If you'd like to learn the language, see \reference{bassics}.

\section{
  \title{getting started}

  Bass is shipped as a single \link{\code{bass}
  binary}{https://github.com/vito/bass/releases/latest} which needs to be
  installed somewhere in your \code{$PATH}.

  Bass runs thunks using \link{Buildkit}{https://github.com/moby/buildkit}, so
  you'll need \code{buildkitd} running somewhere, somehow. At the moment you'll
  probably need some bits and bobs from the \link{Bass
  repo}{https://github.com/vito/bass}:

  \commands{{{
    git clone https://github.com/vito/bass
    cd bass
  }}}

  If you're on \bold{Linux} and don't have Buildkit available via your
  distribution you can use the \code{./hack/buildkit} scripts:

  \commands{{{
    ./hack/buildkit/setup
    ./hack/buildkit/start
  }}}

  If you're on \bold{macOS} you can use
  \link{\code{lima/bass.yaml}}{https://github.com/vito/bass/blob/main/lima/bass.yaml}
  to manage a Linux VM using
  \link{\code{limactl}}{https://github.com/lima-vm/lima}:

  \commands{{{
    brew install lima
    limactl start ./lima/bass.yaml
  }}}

  If you're on \bold{Windows}, follow the Linux instructions in WSL2. Native
  Windows support should be possible once Buildkit supports it.

  With everything set up, try out one of the demos:

  \commands{{{
    bass demos/git-lib.bass
  }}}

  If you see a cryptic socket error, \code{buildkitd} probably isn't running.
  If you see \code{bass: command not found}, it's not in your \code{$PATH}.

  Ask for help in
  \link{GitHub}{https://github.com/vito/bass/discussions/categories/q-a} or
  \link{Discord}{https://discord.gg/HFW85RyUtK} if you get stuck!

  \section{
    \title{running thunks}

    \bass-literate{
      Bass is built around \t{thunks}. Thunks are cacheable commands that
      produce files and/or a stream of values.
    }{{{
      (from (linux/alpine)
        ($ echo "Hello, world!"))
    }}}{
      Throughout this documentation, thunks will be rendered as space invaders to
      make them easier to identify.
    }{
      To run a \t{thunk}'s command and raise an error if it fails, call
      \b{run}:
    }{{{
      (run (from (linux/alpine)
             ($ echo "Hello, world!")))
    }}}{
      To run a thunk and get \bass{true} or \bass{false} instead of erroring,
      call \b{succeeds?}:
    }{{{
      (succeeds? (from (linux/alpine)
                   ($ sh -c "exit 1")))
    }}}{
      Thunks are cached forever. They can be cleared with \code{bass --prune},
      but this should only be necessary for regaining disk space.
    }{
      To influence caching, use \b{with-label} to stamp thunks with arbitrary
      data. Two thunks that differ only in labels will be cached independently.
    }{{{
      (run (with-label
             (from (linux/alpine)
               ($ echo "Hello, world!"))
             :foo "bar"))
    }}}{
      Tip: to avoid deep nesting like above, consider the alternative \b{->}
      form.
    }{{{
      (-> ($ echo "Hello, world!")
          (with-image (linux/alpine))
          (with-label :foo "bar")
          run)
    }}}
  }

  \section{
    \title{reading outputs}

    \bass-literate{
      To parse a stream of JSON values from a thunk's \code{stdout}, call \b{read}:
    }{{{
      (def cat-thunk
        (from (linux/alpine)
         ; note: stdin is also JSON
          (.cat "hello" "goodbye")))

      (let [stream (read cat-thunk :json)]
        [(next stream :end)
         (next stream :end)
         (next stream :end)])
    }}}{
      To parse UNIX style tabular output, set the protocol to \bass{:unix-table}:
    }{{{
      (-> ($ ls -r /usr/bin)
          (with-image (linux/alpine))
          (read :unix-table)
          next)
    }}}{
      To collect all output into one big string, set the protocol to \bass{:raw}:
    }{{{
      (-> ($ echo "Hello, world!")
          (with-image (linux/alpine))
          (read :raw)
          next)
    }}}
  }

  \section{
    \title{providing secrets}

    \bass-literate{
      To shroud a string in secrecy, pass it to \b{mask} and give it a name.
    }{{{
      (mask "hunter2" :nickserv)
    }}}{
      Secrets can be passed to thunks as regular strings. When serialized, a
      secret's value is omitted.
    }{{{
      ($ echo (mask "secret" :password))
    }}}{
      \construction{Bass does not mask the secret from the command's output.
      This may come in the future.}
    }{
      Sensitive values can end up in all sorts of sneaky places. Bass does its
      best to prevent that from happening.

      \list{
        A thunk's command runs in an isolated environment, so an evil thunk
        can't* spy on your secrets.
      }{
        A thunk's command (i.e. stdin, env, argv) isn't captured into image
        layer metadata, so exporting a thunk as an OCI image will not leak
        secrets passed to it.
      }{
        Secret values are never serialized, so publishing a thunk path will not
        leak any secrets used to build it.
      }{
        All env vars passed to \code{bass} are only provided to the entrypoint
        script (as \b{script.*env*}). They are also \italic{removed from the
        \code{bass} process} so that they can't be sneakily accessed at
        runtime.
      }

      With the above precautions, passing secrets to thunks as env vars may
      often be most ergonomic approach. If you have more ideas, please suggest
      them!
    }{
      To pass a secret to a command using a secret mount, use \b{with-mount}:
    }{{{
      (-> ($ cat /secret)
          (with-mount (mask "hello" :shh) /secret)
          (with-image (linux/alpine))
          run)
    }}}

    * This is all obviously to the best of my ability - I can't promise it's
    perfect. If you find other ways to make Bass safer, please share them!
  }

  \section{
    \title{caching directories}

    \bass-literate{
      Caches may be specified using \b{with-mount} with paths on a logical
      cache filesystem.
    }{{{
      (defn counter [tag]
        (from (linux/alpine)
          (-> ($ sh -c "echo x >> /var/cache/file; cat /var/cache/file | wc -l")
              (with-label :tag tag)
              (with-mount /docs/counter/ /var/cache/))))

      (defn count [tag]
        (next (read (counter tag) :json)))

      [(count "once")
       (count "twice")
       (count "thrice")]
    }}}{
      Caches are cleared by \code{bass --prune}.
    }
  }
}

\section{
  \title{building stuff}

  \section{
    \title{passing bits around}

    \bass-literate{
      To refer to files created by a thunk, use \t{thunk paths}:
    }{{{
      (def meowed
        (from (linux/alpine)
          (-> ($ sh -c "cat > ./file")
              (with-stdin "hello" "goodbye"))))

      meowed/file
    }}}{
      As with thunks, constructing a thunk path doesn't actually cause the thunk to
      run. Calling \b{read} will, though:
    }{{{
      (next (read meowed/file :json))
    }}}{
      Thunk paths may be passed into other thunks, and so on, forming one big
      thunk.
    }{{{
      (defn go-build [src pkg]
        (-> (from (linux/golang)
              (cd src
                ($ go build -o ../out/)))
            (subpath ./out/)))

      (def cloned
        (from (linux/alpine/git)
          ($ git clone "https://github.com/vito/bass" ./repo/)))

      (go-build cloned/repo/ "./cmd/...")
    }}}{
      Astute observers will note that \bass{cloned} above is not a \t{hermetic},
      because it doesn't specify a version.
    }{
      The \reference{git-module} provides basic tools for cloning
      \link{Git}{https://git-scm.com} repositories in a hermetic manner.
    }{{{
      (use (.git (linux/alpine/git)))

      (let [uri "https://github.com/vito/bass"]
        (git:checkout uri (git:ls-remote uri "HEAD")))
    }}}{
      The \reference{git-module} also provides \b{git.github}, a \t{path root} for
      repositories hosted at \link{GitHub}{https://github.com}.
    }{{{
      git:github/vito/bass/ref/HEAD/
    }}}
  }

  \section{
    \title{exporting files}

    \bass-literate{
      Thunk paths can be saved in JSON format for archival, auditing, efficient
      distribution, or just for funsies.
    }{{{
      (use (.git (linux/alpine/git)))

      (-> ($ go build -o ../out/ "./cmd/...")
          (with-dir git:github/vito/bass/ref/HEAD/)
          (with-image (linux/golang))
          (subpath ./out/)
          (emit *stdout*))
    }}}{
      Feeding \t{thunk path} JSON to \code{bass --export} will print a \code{tar}
      stream containing the file tree.
    }
  }

  \section{
    \title{exporting images}

    \bass-literate{
      Feeding \t{thunk} JSON to \code{bass --export} will print an OCI image
      \code{tar} stream, which can be piped to \code{docker load} for
      troubleshooting with \code{docker run}. \construction{This will be made
      easier in the future.}
    }{{{
      (emit
        (from (linux/ubuntu)
          ($ apt-get update)
          ($ apt-get -y install git))
        *stdout*)
    }}}
  }
}

\section{
  \title{misc}

  \construction{TODO}

  \section{
    \title{sharing bass code}

    \demo{git-lib.bass}
  }

  \section{
    \title{image versioning}
  }

  \section{
    \title{pinning in \code{bass.lock}}

    \bass-literate{
      Bass supports memoizing functions by caching inputs and inputs into a file
      named \code{bass.lock}.
    }{{{
      ((memo length *dir*/bass.lock :lengths) [1 2 3])
      ((memo length *dir*/bass.lock :lengths) [1 2 3])
    }}}{
      Memoization is leveraged for caching dependency version resolution. The
      \b{linux} and \b{git.github} path roots automatically memoize into the
      nearest \code{bass.lock} file to the caller's \b{script.*dir*}.
    }{{{
      (use (.git (linux/alpine/git)))
      git:github/vito/bass/ref/main/
    }}}{
      Folks implementing their own memoization should probably not rely on this
      \code{*dir*} trick. Consider it a special case to make bootstrapping more
      succinct.
    }
  }

  \section{
    \title{CI/CD}

    TODO
  }
}

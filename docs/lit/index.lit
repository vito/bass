\title{bass}{index}
\use-plugin{bass-www}

Bass is a low-fidelity Lisp dialect for scripting the infrastructure beneath
your project.

Bass's goal is to make the path to production predictable, verifiable,
flexible, and most importantly, fun.

\commands{{
go install github.com/vito/bass/cmd/...@latest
}}

Bass is built around \t{thunks} - hermetic, idempotent commands that create
files and/or return a stream of response values.

\bass-literate{{{
  (-> ($ echo "Hello, world!")
      (in-image "alpine"))
}}}{
  Thunks can be \b{run} which returns a stream of values which can
  be read with \b{next}.
}{{{
  (defn git-check [uri]
    (-> ($ ls-remote $uri "HEAD")
        (in-image "alpine/git")
        (response-from :stdout :unix-table)
        (with-label :at (now 60)) ; cache with minute granularity
        run     ; run workload - prints "deadbeef HEAD"
        next    ; get first row
        first)) ; get first column

  (git-check "https://github.com/vito/bass")
}}}{
  Or you can reference a \b{path} created by a thunk - this value is called an \italic{artifact thunk}.
}{{{
  (defn git-clone [uri sha]
    (-> ($ sh -c "git clone $0 ./ && git checkout $1" $uri $sha)
        (in-image "alpine/git")
        (with-entrypoint "")
        (path ./)))

  (def bass "https://github.com/vito/bass")

  (let [sha (git-check bass)]
    (git-clone bass sha))
}}}{
  Artifact thunks may be passed into other thunks, and so on, forming one big thunk.
}{{{
  (defn go-build [src pkg]
    (-> ($ go build -o ../out/ $pkg)
        (in-dir ./src/)
        (with-mount src ./src/)
        (in-image "golang")
        (path ./out/)))

  (-> (git-clone bass (git-check bass))
      (go-build "./..."))
}}}{
  A typical thing for \code{bass} scripts to do is \b{emit} an artifact thunk
  to \code{*stdout*} - try piping the JSON below to \code{bass --export}!
}{{{
  (-> (git-clone bass (git-check bass))
      (go-build "./...")
      (emit *stdout*))
}}}{
  If you're looking for a more Ã  la carte experience, you can use Concourse
  \reference{binding-resource}{resources} and
  \reference{binding-run-task}{tasks}:
}{{{
  (import (load (.concourse))
          resource get-latest run-task)

  (def booklit
    (resource :git {:uri "https://github.com/vito/booklit"}))

  (let [src (get-latest booklit)]
    (run-task src/ci/build.yml
              :inputs {:booklit src}))
}}}

Intrigued? Check out the other \reference{demos}!

\split-sections

\include-section{demos.lit}
\include-section{bassics.lit}
\include-section{stdlib.lit}
\include-section{meta.lit}

\title{bass}{index}
\use-plugin{bass-www}

Bass is a low-fidelity Lisp dialect for scripting the infrastructure beneath
your project.

Bass's goal is to make the path to production predictable, verifiable,
flexible, and most importantly, fun.

\commands{{
go install github.com/vito/bass/cmd/...@latest
}}

\construction{WARNING: this project is pre-alpha. Feel free to try it out, but
expect breaking changes at any moment. The docs should be pretty up-to-date,
but they're not complete.}

Bass is built around \t{thunks} - hermetic, cacheable commands that produce
files and/or a stream of response values.

\bass-literate{{{
  (from (linux/alpine)
    ($ echo "Hello, world!"))
}}}{
  Thunks can be \b{run} which returns a stream of values which can
  be read with \b{next}.
}{{{
  (def cat-thunk
    (from (linux/alpine)
      (-> (.cat "hello" "goodbye")
          (response-from :stdout :json))))

  (let [stream (run cat-thunk)]
    [(next stream :end)
     (next stream :end)
     (next stream :end)])
}}}{
  Or you can reference a \b{path} created by a thunk - this value is
  called an \italic{artifact} or a \t{thunk path}.
}{{{
  (path
    (from (linux/alpine)
      (-> ($ sh -c "cat > ./file")
          (with-stdin "hello" "goodbye")))
    ./file)
}}}{
  Bass comes with a \reference{git-module} for supporting the common case of
  cloning \link{Git}{https://git-scm.com} repositories. Under the hood it uses
  thunks like the one above.
}{{{
  (use (.git (linux/alpine/git)))
}}}{
  It also provides \b{github}, a \t{path root} for repositories hosted at
  \link{GitHub}{https://github.com}. Try dissecting the space invader to see
  the underlying thunks:
}{{{
  git:github/vito/bass/ref/main/
}}}{
  Artifact thunks may be passed into other thunks, and so on, forming one big
  thunk.
}{{{
  (defn go-build [src pkg]
    (-> (from (linux/golang)
          (cd src
            ($ go build -o ../out/)))
        (path ./out/)))

  (go-build git:github/vito/bass/ref/main/ "./cmd/...")
}}}{
  It's typical for \code{bass} scripts \b{emit} a \t{thunk path} to
  \code{*stdout*}, where it can either by saved in JSON form or exported to a
  \code{tar} stream with \code{bass --export}.
}{{{
  (-> (go-build git:github/vito/bass/ref/main/ "./cmd/...")
      (emit *stdout*))
}}}{
  If you'd like to hop into a thunk and troubleshoot something, you can also
  emit the \t{thunk} itself and pipe it to \code{bass -e | docker load} and
  then run it with \code{docker run}. (This will probably be made easier in the
  future.)
}{{{
  (emit
    (from (linux/ubuntu)
      ($ apt update)
      ($ apt -y install git))
    *stdout*)
}}}

Intrigued? Check out the other \reference{demos}!

\split-sections

\include-section{demos.lit}
\include-section{bassics.lit}
\include-section{stdlib.lit}
\include-section{meta.lit}

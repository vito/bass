\title{bass}{index}
\use-plugin{bass-www}

Bass is a low-fidelity Lisp dialect for scripting the infrastructure beneath
your project.

Bass's goal is to make the path to production predictable, verifiable,
flexible, and most importantly, fun.

\commands{{
go install github.com/vito/bass/cmd/...@latest
}}

\construction{WARNING: this project is pre-alpha and these docs need a lot of
work to catch up with recent changes in direction. Feel free to tinker, but
expect lots of rough edges and breakage in the future. ðŸ˜…}

Bass is built around \t{thunks} - hermetic, cacheable commands that produce
files and/or a stream of response values.

\bass-literate{{{
  (from "alpine"
    ($ echo "Hello, world!"))
}}}{
  Thunks can be \b{run} which returns a stream of values which can
  be read with \b{next}.
}{{{
  (let [thunk (from "alpine"
                (-> (.cat "hello" "goodbye")
                    (response-from :stdout :json)))
        stream (run thunk)]
    [(next stream :end)
     (next stream :end)
     (next stream :end)])
}}}{
  Or you can reference a \b{path} created by a thunk - this value is
  called an \italic{artifact} or a \t{thunk path}.
}{{{
  (path
    (from "alpine"
      (-> ($ sh -c "cat > ./file")
          (with-stdin "hello" "goodbye")))
    ./file)
}}}{
  Bass comes with a \reference{git-module} for supporting the common case of
  cloning \link{Git}{https://git-scm.com} repositories. Under the hood it uses
  thunks like the one above.

  It also provides \b{github}, a \t{path root} for repositories hosted at
  \link{GitHub}{https://github.com}.
}{{{
  (use (.git "alpine/git"))

  (let [shorthand git:github/vito/bass/ref/main/
        repo "https://github.com/vito/uri"
        longform (git:checkout repo (git:ls-remote repo "main"))]
    [shorthand longform])
}}}{
  Artifact thunks may be passed into other thunks, and so on, forming one big
  thunk.
}{{{
  (defn go-build [src pkg]
    (-> (from "golang"
          (cd src
            ($ go build -o ../out/)))
        (path ./out/)))

  (go-build git:github/vito/bass/ref/main/ "./cmd/...")
}}}{
  A typical thing for \code{bass} scripts to do is \b{emit} an artifact thunk
  to \code{*stdout*} - try piping the JSON below to \code{bass --export}!
}{{{
  (-> git:github/vito/bass/ref/main/
      (go-build "./cmd/...")
      (emit *stdout*))
}}}{
  If you'd like to hop into a thunk and troubleshoot something, you can also
  emit the \t{thunk} itself and pipe it to \code{bass -e | docker load} and
  then run it with \code{docker run}. (This will probably be made easier in the
  future.)
}{{{
  (emit
    (from "ubuntu"
      ($ apt update)
      ($ apt -y install git))
    *stdout*)
}}}

Intrigued? Check out the other \reference{demos}!

\split-sections

\include-section{demos.lit}
\include-section{bassics.lit}
\include-section{stdlib.lit}
\include-section{meta.lit}

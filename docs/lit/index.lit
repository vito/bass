\title{bass}{index}
\use-plugin{bass-www}

Bass is a low-fidelity Lisp dialect for scripting the infrastructure beneath
your project.

Bass's goal is to make the path to production predictable, verifiable,
flexible, and most importantly, fun.

\commands{{
go install github.com/vito/bass/cmd/...@latest
}}

Bass is built around \t{thunks} - hermetic, idempotent commands that create
files and/or return a stream of response values.

\bass-literate{{{
  (from "alpine"
    ($ echo "Hello, world!"))
}}}{
  Thunks can be \b{run} which returns a stream of values which can
  be read with \b{next}.
}{{{
  (defn git-check [uri ref]
    ; note: (-> x a b c) is sugar for (c (b (a x)))
    (-> (from "alpine/git"
          (-> ($ git ls-remote $uri $ref)
              ; parse awk-style output
              (response-from :stdout :unix-table)
              ; cache with minute granularity
              (with-label :at (now 60))))
        ; run the thunk
        run
        ; get first ref row (e.g. ["sha" "ref"])
        next
        ; get sha
        first))

  (git-check "https://github.com/vito/bass" "main")
}}}{
  Or you can reference a \b{path} created by a thunk - this value is called an
  \italic{artifact thunk}.
}{{{
  (defn git-clone [uri sha]
    (-> (from "alpine/git"
          ($ git clone $uri ./)
          ($ git checkout $sha))
        (path ./)))

  (def bass "https://github.com/vito/bass")

  (let [sha (git-check bass "main")]
    (git-clone bass sha))
}}}{
  Artifact thunks may be passed into other thunks, and so on, forming one big thunk.
}{{{
  (defn go-build [src pkg]
    (-> (from "golang"
          (cd src
            ($ go build -o ../out/)))
        (path ./out/)))

  (-> (git-clone bass (git-check bass "main"))
      (go-build "./..."))
}}}{
  A typical thing for \code{bass} scripts to do is \b{emit} an artifact thunk
  to \code{*stdout*} - try piping the JSON below to \code{bass --export}!
}{{{
  (-> (git-clone bass (git-check bass "main"))
      (go-build "./...")
      (emit *stdout*))
}}}{
  If you'd like to hop into a thunk and troubleshoot something, you can also
  emit the \t{thunk} itself and pipe it to \code{bass -e | docker load} and
  then run it with \code{docker run}. (This will probably be made easier in the
  future.)
}{{{
  (emit
    (from "ubuntu"
      ($ apt update)
      ($ apt -y install git))
    *stdout*)
}}}

Intrigued? Check out the other \reference{demos}!

\split-sections

\include-section{demos.lit}
\include-section{bassics.lit}
\include-section{stdlib.lit}
\include-section{meta.lit}

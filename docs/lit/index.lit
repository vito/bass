\title{bass}{index}
\use-plugin{bass-www}

Bass is a low-fidelity Lisp dialect for scripting the infrastructure beneath
your project.

Bass's goal is to make the path to production predictable, verifiable,
flexible, and most importantly, fun.

\commands{{
go install github.com/vito/bass/cmd/...@latest
}}

\construction{WARNING: this project is pre-alpha and these docs need a lot of
work to catch up with recent changes in direction. Feel free to tinker, but
expect lots of rough edges and breakage in the future. ðŸ˜…}

Bass is built around \t{thunks} - hermetic, cacheable commands that produce
files and/or a stream of response values.

\bass-literate{{{
  (from "alpine"
    ($ echo "Hello, world!"))
}}}{
  Thunks can be \b{run} which returns a stream of values which can
  be read with \b{next}.
}{{{
  ; load durations stdlib
  (use (.durations))

  ; resolves a ref to a sha at the git remote uri
  (defn git-ls-remote [uri ref]
    (let [ls (from "alpine/git"
               (-> ($ git ls-remote $uri $ref)
                   ; parse awk-style table output
                   (response-from :stdout :unix-table)
                   ; cache every minute
                   (with-label :at (durations:every-minute))))]
      ; read the first column of the first row
      (first (next (run ls)))))

  (git-ls-remote "https://github.com/vito/bass" "main")
}}}{
  Or you can reference a \b{path} created by a thunk - this value is called an
  \italic{artifact thunk}.
}{{{
  ; returns the repo at the given sha (as a detached HEAD)
  (defn git-checkout [uri sha]
    (path
      (from "alpine/git"
        (-> ($ git clone $uri ./)
            ; use sha as a label for cache control
            (with-label :for sha))
        ($ git checkout $sha))
      ./))

  (def bass "https://github.com/vito/bass")

  (let [sha (git-ls-remote bass "main")]
    (git-checkout bass sha))
}}}{
  Artifact thunks may be passed into other thunks, and so on, forming one big thunk.
}{{{
  (defn go-build [src pkg]
    (-> (from "golang"
          (cd src
            ($ go build -o ../out/)))
        (path ./out/)))

  (-> (git-checkout bass (git-ls-remote bass "main"))
      (go-build "./cmd/..."))
}}}{
  A typical thing for \code{bass} scripts to do is \b{emit} an artifact thunk
  to \code{*stdout*} - try piping the JSON below to \code{bass --export}!
}{{{
  (-> (git-checkout bass (git-ls-remote bass "main"))
      (go-build "./cmd/...")
      (emit *stdout*))
}}}{
  If you'd like to hop into a thunk and troubleshoot something, you can also
  emit the \t{thunk} itself and pipe it to \code{bass -e | docker load} and
  then run it with \code{docker run}. (This will probably be made easier in the
  future.)
}{{{
  (emit
    (from "ubuntu"
      ($ apt update)
      ($ apt -y install git))
    *stdout*)
}}}

Intrigued? Check out the other \reference{demos}!

\split-sections

\include-section{demos.lit}
\include-section{bassics.lit}
\include-section{stdlib.lit}
\include-section{meta.lit}

(provide
  [
   *default-config*

   resource
   get-latest

   run-task

   get-image-resource
   get-latest-image-resource
  ]
  (def dur (load (.durations)))

  ; a convenient mapping from type keywords to their image
  (def *core-types*
    {:registry-image "concourse/registry-image-resource"
     :docker-image "concourse/docker-image-resource"
     :git "concourse/git-resource"
     :time "concourse/time-resource"})

  ; the default configuration, if none is supplied on *stdin*
  (def *default-config*
    {:platforms {:linux linux}
     :types *core-types*
     :check-interval dur:hour
     :image-check-interval dur:day})

  (def *config*
    (merge *default-config* (next *stdin* {})))

  ; constructs a resource scope
  ;
  ; If type is a keyword, it is mapped to an image via :types in the module
  ; configuration.
  ;
  ; Otherwise, it is passed along to `in-image`.
  (defn resource [type source]
    (provide [check check-every get put]
      ; detect new versions of the resource with the default interval
      ;
      ; An optional cursor version to check from may be provided.
      (defn check optional-version
        (check-every *config*:check-interval & optional-version))

      ; detect new versions of the resource with the given interval
      ;
      ; An optional cursor version to check from may be provided.
      (defn check-every [interval & optional-version]
        (let [version (case optional-version [] null (v & _) v)]
          (apply stream (next (run (check-wl version interval))))))

      ; fetch a version of the resource
      (defn get [version & params]
        (path (get-wl version (list->scope params)) ./))

      ; create or update a version of the resource
      (defn put params
        (next (run (put-wl version (list->scope params)))))

      (def image
        (if (symbol? type)
          (-> *config* :types type)
          type))

      (defn check-wl [version interval]
        (-> (/opt/resource/check {:source source :version version})
            (with-meta :at (now interval))
            (in-image image)))

      (defn get-wl [version params]
        (-> (/opt/resource/in {:source source :version version :params params})
            (with-args ./)
            (in-image image)))

      (defn put-wl [params]
        (-> (/opt/resource/out {:source source :params params})
            (with-args ./)
            (in-image image))))

    (get-current-scope))

  ; gets the latest version of a resource
  (defn get-latest [r & kwargs]
    (r:get (last (r:check)) & kwargs))

  (def yaml
    (load (.yaml)))

  ; run a task with the given parameters
  ;
  ; The :inputs param provides as a mapping from name to workload path.
  ;
  ; Returns an scope with :outputs bound to a mapping from name to workload
  ; path, and :result bound to the workload's stream.
  (defn run-task [config-path & kwargs]
    (let [config (yaml:decode config-path)
          opts (list->scope kwargs)
          workload (task->workload config opts)

          output-configs (:outputs config [])
          output-pairs (map (fn [output]
                              (let [name (:name output)
                                    src (:path output name)]
                                [(string->symbol name)
                                 (path workload (string->dir src))]))
                            output-configs)
          outputs (list->scope (apply append output-pairs))]
      {:outputs outputs
       :result (run workload)}))

  (defn task->workload [config opts]
    (let [platform-name (string->symbol (-> config :platform))
          platform (-> *config* :platforms platform-name)

          image-type-name (string->symbol (-> config :image-resource :type))
          image-type (-> *config* :types image-type-name)
          image-source (-> config :image-resource :source)
          image-params (-> config :image-resource (:params {}) scope->list)
          image-version (-> config :image-resource (:version null))
          image-resource (resource image-type image-source)
          image (if image-version
                  (get-image-resource image-resource version & image-params)
                  (get-latest-image-resource image-resource & image-params))

          run-path (string->path (-> config :run :path))
          run-args (-> config :run (:args []))
          run-dir (string->dir (-> config :run (:dir ".")))

          privileged (:privileged opts false)

          provided-inputs (:inputs opts {})
          configured-inputs (:inputs config)
          mounts (filter id (map (fn [i] (input-mount provided-inputs i))
                                 configured-inputs))

          configured-params (:params config {})
          provided-params (:params opts {})
          env (reduce-kv (fn [r k v] (assoc r k (if (null? v) "" v)))
                         {}
                         (merge configured-params provided-params))]
      (-> (run-path)
          (with-args & run-args)
          (in-dir run-dir)
          (with-mounts mounts)
          (with-env env)
          (on-platform platform)
          (in-image image)
          (with-insecure privileged)
          (response-from :exit))))

  (defn get-latest-image-resource [resource & kwargs]
    (let [check (resource:check-every *config*:image-check-interval)]
      (get-image-resource resource (last check) & kwargs)))

  (defn get-image-resource [resource version & kwargs]
    (let [got (resource:get version :format "oci" & kwargs)]
      got/image.tar))

  (defn input-mount [inputs input]
    (let [name (:name input)
          input-name (string->symbol name)
          source (input-name inputs)]
      (if source
        {:source source
         :target (-> input (:path name) string->dir)}
        null))))

(provide [ls-remote checkout path]
  (def *git-image*
    (case (next *stdin* :none)
      :none (error "git image must be provided")
      image image))

  ; resolves a ref to a sha at the remote repo
  ;
  ; Does not cache. Used to resolve the ref at a point in time.
  ;
  ; => (use (.git (linux/alpine/git)))
  ;
  ; => (git:ls-remote "https://github.com/vito/bass" "main")
  (defn ls-remote [repo ref]
    (let [ls (from *git-image*
               (-> ($ git ls-remote $repo $ref)
                   (with-label :at (now 0))))]
      (first (next (read ls :unix-table)))))

  ; returns the repo checked out to the given ref
  ;
  ; The thunk for cloning the repo is labeled with the given ref. If the ref
  ; refers to a branch, you may want to resolve it to a sha first with
  ; (ls-remote) so that it's not cached forever.
  ;
  ; Submodules are always initialized.
  ;
  ; => (use (.git (linux/alpine/git)))
  ;
  ; => (git:checkout "https://github.com/vito/bass" "ea8cae6d4c871cb14448d7254843d86dbab8505f")
  (defn checkout [repo ref]
    (subpath
      (from *git-image*
        (-> ($ git clone $repo ./)
            (with-label :for ref))
        ($ git checkout $ref)
        ($ git submodule update --init --recursive))
      ./))

  (defn memo-ls-remote [memos]
    (memo memos (.git *git-image*) :ls-remote))

  (defn seg [path-or-str]
    (if (string? path-or-str)
      path-or-str
      (path-name path-or-str)))

  ; returns a path root for repos at the given base URL
  ;
  ; Please omit the trailing slash. (TODO: would be nice to just strip it or
  ; somehow make it a non-issue.)
  ;
  ; => (use (.git (linux/alpine/git)))
  (defn path [memos url]
    (fn [user]
      (fn [repo]
        (let [uri (str url "/" (seg user) "/" (seg repo))]
          (fn [route]
            (case route
              ./sha/
              (fn [sha] (checkout uri (seg sha)))

              ./ref/
              (fn [ref]
                (checkout uri ((memo-ls-remote memos) uri (seg ref)))))))))))

; a path root for repos hosted at github.com
;
; Memoizes ref resolution into the nearest bass.lock to the caller's *dir*.
;
; => (use (.git (linux/alpine/git)))
;
; => git:github/vito/bass/sha/ea8cae6d4c871cb14448d7254843d86dbab8505f/
;
; => (git:github/vito/bass/sha/ "ea8cae6d4c871cb14448d7254843d86dbab8505f")
;
; => git:github/vito/bass/ref/main/
(defop github args scope
  (eval [(path scope:*dir* "https://github.com") & args] scope))

; reduces xs, rightmost values first, with initial value z
;
; => (foldr cons [4 5] [1 2 3])
(defn foldr [f z xs]
  (case xs
    [] z
    [x & xs'] (f x (foldr f z xs'))))

; reduces xs, leftmost values first, with initial value z
;
; => (foldl conj [4 5] [1 2 3])
(defn foldl [f z xs]
  (case xs
    [] z
    [x & xs'] (foldl f (f z x) xs')))

; returns a scope containing the union of the given scopes
;
; Constructs a scope with all of the given scopes as parents, in reverse order.
;
; => (merge {:a 1 :b 2} {:c 3} {:b :two})
(defn merge scopes
  (apply make-scope (foldr (fn [x ss] (conj ss x)) [] scopes)))

(provide (append)
  (defn append1 [xs ys]
    (case xs
      [] ys
      [x & xs'] (cons x (append1 xs' ys))))

  ; joins all given lists into one list
  ;
  ; => (append [1] [2 3] [4 5 6])
  (defn append xss
    (foldl append1 [] xss)))

; returns only values from xs which satisfy the predicate
;
; => (filter symbol? [:abc 123 :def "456"])
(defn filter [predicate xs]
  (apply append (map (fn [x] (if (predicate x) [x] [])) xs)))

; conjoins values onto the end of a list
;
; => (conj [123] 4 5 6)
(defn conj [xs y & ys]
  (if (empty? xs)
    [y & ys]
    (cons (first xs)
          (conj (rest xs) y & ys))))

; constructs an object from a list of flat keyword/value pairs
;
; => (list->scope [:a 1 :b 2 :c 3])
(defn list->scope [kwargs]
  (assoc {} & kwargs))

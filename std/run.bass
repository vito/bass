; returns a structure which will join the given values into a single string value
;
; Used to concatenate paths with string values to be passed as an argument to a
; workload.
(defn arg vals
  {:arg vals})

; detects whether the value is an arg structure
;
; Concretely, this is any scope with an :arg binding.
(defn arg? [val]
  (if (and (scope? val) val:arg)
    true
    ; normalize falsy value to false
    false))

; sets the :args field of the workload
(defn with-args [workload & args]
  (assoc workload :args args))

; sets the :stdin field of the workload
(defn with-stdin [workload & stdin]
  (assoc workload :stdin stdin))

; sets the :entrypoint field of the workload
(defn with-entrypoint [workload & entrypoint]
  (assoc workload :entrypoint entrypoint))

; sets the :insecure field of the workload to true
(defn insecure! [workload]
  (with-insecure workload true))

; sets the :insecure field of the workload
(defn with-insecure [workload val]
  (assoc workload :insecure val))

(provide ($)
  (defn resolve-arg [a scope]
    (if (symbol? a)
      (let [word (symbol->string a)
            start (substring word 0 1)]
        (if (= start "$")
          (eval (string->symbol (substring word 1)) scope)
          word))
      (eval a scope)))

  ; constructs a workload with args set as :args
  ;
  ; Symbol arguments are automatically converted to strings. Symbols beginning
  ; with $ are resolved to their binding with the leading $ removed.
  (defop $ [cmd & args] scope
    ; TODO: check pair? args; could be splatted
    ;
    ; in fact, check if a trailing splat arg even works properly here?
    (let [as (map (fn (a) (resolve-arg a scope)) args)]
      (apply with-args [((eval cmd scope)) & as]))))

(def linux
  {:os "linux"})

(def windows
  {:os "windows"})

(def darwin
  {:os "darwin"})

; the default platform for workloads that configure an image
(def *default-platform*
  linux)

; sets the :image field of the workload
(defn in-image [workload image]
  (assoc workload
         :image (if (string? image)
                  {:repository image}
                  image)
         :platform (:platform workload *default-platform*)))

; sets the :platform field of the workload
(defn on-platform [workload platform]
  (assoc workload :platform platform))

; sets the :response field of the workload
;
; If source is :stdout, sets it to {:stdout true}.
; If source is :exit, sets it to {:exit-code true}.
; If source is a path?, sets it to {:file source}.
(defn response-from [workload source & optional-protocol]
  (let [protocol (if (empty? optional-protocol)
                   "json"
                   (str (first optional-protocol)))]
    (assoc workload
           :response
           (cond
             (= :stdout source) {:stdout true :protocol protocol}
             (= :exit source) {:exit-code true :protocol protocol}
             (path? source) {:file source :protocol protocol}
             :else (errorf "unknown response: %s" source)))))

; sets the :dir field of the workload
(defn in-dir [workload dir]
  (assoc workload :dir dir))

; appends a mount to the :mounts field of the workload
(defn with-mount [workload source target]
  (let [cur (:mounts workload [])]
    (assoc workload
           :mounts
           (conj cur {:source source :target target}))))

; sets the :mounts field of the workload
(defn with-mounts [workload mounts]
  (assoc workload :mounts mounts))

; inserts an env var and value into the :env field of the workload
;
; TODO: append, add in stable order
(defn with-env-var [workload name value]
  (assoc workload :env (assoc (:env workload {}) name value)))

; sets the :env field of the workload
(defn with-env [workload env]
  (assoc workload :env env))

; attaches metadata to the workload
(defn with-meta [workload key val]
  (assoc workload :meta (assoc (:meta workload {}) key val)))

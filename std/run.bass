; returns a structure which will join the given values into a single string value
;
; Used to concatenate path thunks with string values to be passed to another
; thunk.
;
; The name stems from (str).
;
; => (str-thunk (subpath (.build) ./out/) "*") ; glob
(defn str-thunk vals
  {:str vals})

; sets the :insecure field of the thunk to true
;
; => (insecure! (.boom))
(defn insecure! [thunk]
  (with-insecure thunk true))

(provide ($)
  (defn resolve-arg [a scope]
    (if (symbol? a)
      (let [word (symbol->string a)
            start (substring word 0 1)]
        (if (= start "$")
          (eval (string->symbol (substring word 1)) scope)
          (eval word scope)))
      (eval a scope)))

  (defn resolve-cmd [a scope]
    (let [val (resolve-arg a scope)]
      (if (string? val)
        (string->cmd-path val)
        val)))

  (defn resolve-args [args scope]
    (case args
      [] []
      [a & as] (cons (resolve-arg a scope)
                     (resolve-args as scope))
      splat (resolve-arg splat scope)))

  ; constructs a thunk with args
  ;
  ; Symbol arguments are automatically converted to strings. Symbols beginning
  ; with $ are resolved to their binding with the leading $ removed.
  ;
  ; => ($ sh -c "echo Hello, world!")
  (defop $ [cmd & args] scope
    (let [c (resolve-cmd cmd scope)
          as (resolve-args args scope)]
      (with-args (c) as))))

; chain a sequence of thunks starting from an initial image
;
; => (from (linux/alpine) ($ echo "Hello, world!"))
^:indent
(defn from [image & thunks]
  (foldl (fn [base cmd] (with-image cmd base)) image thunks))

; chain a sequence of thunks with a given working directory
;
; Shorthand for applying (with-dir) to each thunk and chaining them with (from).
;
; Typically used within an outer (from) which sets first command's image in
; order to join it into the chain.
;
; => (from (linux/alpine) (cd /bin/ ($ find ./)))
^:indent
(defn cd [dir & thunks]
  (apply from (map (fn [thunk] (with-dir thunk dir)) thunks)))

(provide [linux]
  (defn memo-resolve [memos]
    (if (null? memos)
      resolve
      (memo memos (.run) :resolve)))

  (defn join [delim strs]
    (case strs
      [] ""
      [s] s
      [s & ss] (str s delim (join delim ss))))

  (defn path-resolver [do-resolve platform names]
    (fn optional
      (case optional
        []
        (do-resolve
          {:platform platform
           :repository (join "/" names)
           :tag "latest"})

        [tag-or-path]
        (cond
          (or (symbol? tag-or-path) (string? tag-or-path))
          (do-resolve
            {:platform platform
             :repository (join "/" names)
             :tag (str tag-or-path)})

          (path? tag-or-path)
          (path-resolver do-resolve
                         platform
                         (conj names (path-name tag-or-path)))

          true
          (errorf "invalid image path segment: %s" tag-or-path)))))

  ; returns a path root for resolving images with the given platform
  ;
  ; Memoizes image resolution into memos.
  ;
  ; => (def linux (path {:os "linux"}))
  ;
  ; => (linux/ubuntu)
  ;
  ; => (linux/ubuntu :18.04)
  ;
  ; => (linux/docker.io/library/ubuntu :18.04)
  (defn path [memos platform]
    (path-resolver (memo-resolve memos) platform []))

  ; a path root for resolving Linux images
  ;
  ; Memoizes image resolution into the nearest bass.lock to the caller's *dir*.
  ;
  ; => (linux/ubuntu)
  ;
  ; => (linux/ubuntu :18.04)
  ;
  ; => (linux/docker.io/library/ubuntu :18.04)
  (defop linux args scope
    (eval [(path scope:*dir* {:os "linux"}) & args] scope)))

; returns a structure which will join the given values into a single string value
;
; Used to concatenate path thunks with string values to be passed to another
; thunk.
;
; The name stems from (str).
(defn str-thunk [prefix path suffix]
  {:str vals})

; sets the :insecure field of the thunk to true
(defn insecure! [thunk]
  (with-insecure thunk true))

(provide ($)
  (defn resolve-arg [a scope]
    (if (symbol? a)
      (let [word (symbol->string a)
            start (substring word 0 1)]
        (if (= start "$")
          (eval (string->symbol (substring word 1)) scope)
          (eval word scope)))
      (eval a scope)))

  (defn resolve-cmd [a scope]
    (let [val (resolve-arg a scope)]
      (if (string? val)
        (string->cmd-path val)
        val)))

  (defn resolve-args [args scope]
    (case args
      [] []
      [a & as] (cons (resolve-arg a scope)
                     (resolve-args as scope))
      splat (resolve-arg splat scope)))

  ; constructs a thunk with args set as :args
  ;
  ; Symbol arguments are automatically converted to strings. Symbols beginning
  ; with $ are resolved to their binding with the leading $ removed.
  (defop $ [cmd & args] scope
    (let [c (resolve-cmd cmd scope)
          as (resolve-args args scope)]
      (apply with-args [(c) & as]))))

(def linux
  {:os "linux"})

(provide [linux]
  (defn resolver [platform sofar]
    (fn optional
      (case optional
        []
        (resolve {:platform platform
                  :repository sofar
                  :tag "latest"})

        [tag-or-path]
        (cond
          (or (symbol? tag-or-path) (string? tag-or-path))
          (resolve {:platform platform
                    :repository sofar
                    :tag (str tag-or-path)})

          (path? tag-or-path)
          (resolver platform (str sofar "/" (path-name tag-or-path)))

          true
          (errorf "invalid image path segment: %s" tag-or-path)))))

  ; linux is a path root for images usable by Linux runtimes
  ;
  ; => (linux/ubuntu)
  ;
  ; => (linux/ubuntu :18.04)
  ;
  ; => (linux/docker.io/library/ubuntu :18.04)
  (defn linux [ref]
    (resolver {:os "linux"} (path-name ref))))

; chain a sequence of thunks starting from an initial image
^:indent
(defn from [image & thunks]
  (foldl (fn [base cmd] (in-image cmd base)) image thunks))

; chain a sequence of thunks with a given working directory
;
; Shorthand for applying (in-dir) to each thunk and chaining them with (from).
;
; Typically used within an outer (from) which sets first command's image in
; order to join it into the chain.
^:indent
(defn cd [dir & thunks]
  (apply from (map (fn [thunk] (in-dir thunk dir)) thunks)))

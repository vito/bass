; returns the last value from the stream
;
; As with (next), a default may be provided to be returned when the stream is
; empty. If not provided, an error will be raised if the stream is empty.
(defn last [stream & default]
  (if (empty? default)
    (last stream (next stream))
    (do
      (def v (next stream :end))
      (if (= v :end)
        (first default)
        (last stream v)))))

; calls f for every value read from the stream
;
; Returns null.
(defn each [stream f]
  (let [n (next stream :end)]
    (if (= n :end)
      null
      (do
        (f n)
        (each stream f)))))

; reads the next n values from the stream into a list
(defn take [n stream]
  (if (<= n 0)
    []
    (cons (next stream) (take (- n 1) stream))))
